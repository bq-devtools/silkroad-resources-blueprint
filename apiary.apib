HOST: https://iam.int.bqws.io/v1.0/
--- IAM (v1.0) ---

---
Identity and Authorization Management
---

--
Authorization
The following is a section of resources related to client authorization to the SilkRoad platfom
--
Generate an access token
###Parameters###
The body of the request must contain these form parameters

|Name|Description|Type|Required|
|----|-----------|----|-----------|
|grant_type|The type of the grant request. Only the *urn:ietf:params:oauth:grant-type:jwt-bearer* grant type is supported|String|*|
|assertion|The serialized signed JWT that asserts the grant request (see JWT claims section below) |String|*|

###JWT claims###
|Name|Description|Type|Required|
|----|-----------|----|-----------|
|iss|Client ID of the client making the request|String|*|
|aud|It must always be 'http://iam.bqws.io'|String|*|
|scope|Space separated list of scopes requested|String|*|
|exp|Time when the requested access token must expired. It must be less than an hour from the time of this request|Timestamp (in seconds)|*|
|prn|Username if the request if for a user access token *without* using OAuth|String||

If the client is requesting a user access token using OAuth authentication, the JWT must include the following claims:

|Name|Description|Type|Required|
|----|-----------|----|-----------|
|oauth.service|Service that will provide the authorization, e.g. facebook|String|*|
|oauth.code|Code used in OAuth2 for exanging for a token |String|only if OAuth2|
|oauth.redirect_uri|URI used by the client in OAuth2 to redirect the user when he does the login |String|only if OAuth2|
|oauth.token|Token returned by OAuth1 server to the client when the user does the login |String|only if OAuth1|
|oauth.verifier|Verifier returned by OAuth1 server to the client when the user does the login |String|only if OAuth1|

###Response fields###
|Name|Description|Type|Required|
|----|-----------|----|:------:|
|accessToken  |Token granted for accessing SilkRoad APIs|String|*|
|expiresAt| Epoch time (in millis) when the token expires|Long|*|

###Errors###
|Status|Error|Description|
|----|-----------|----|
|400  |invalid_grant|The grant request is invalid. This occurs when *assertion* is missing, *grant_type* is missing or it is specified to an unsupported value.|
|400  |missing_oauth_params|If the code (for oauth2) or oauth_token and/or oauth_verifier (for oauth1) parameter is missing.|
|401  |unauthorized|The grant request has not procceeded. This occurs if the signatire of the JWT is invalid, or at leats one of the requested scopes is not allowed for the client. |
|401  |no_such_principal| The princial identified by the prn field of the JWT does not exists on the domain of the issuer. |
POST /oauth/token
> Accept: application/json
< 200
< Content-Type: application/json
{
    "accessToken":"valid-token", 
    "expiresAt": 1385377605000
}

Generate an access token from al OAuth callback
###Parameters###

|Name|Description|Type|Required|
|----|-----------|----|-----------|
|grant_type|The type of the grant request. Only the *urn:ietf:params:oauth:grant-type:jwt-bearer* grant type is supported|String|*|
|assertion|The serialized signed JWT that asserts the grant request* |String|*|
|code|Code used in oAuth2 for exanging for a token |String|only if OAuth2|
|oauth_token|Token returned by OAuth1 server to the client when the user does the login |String|only if OAuth1|
|oauth_verifier|Verifier returned by OAuth1 server to the client when the user does the login |String|only if OAuth1|



###JWT claims###
|Name|Description|Type|Required|
|----|-----------|----|-----------|
|iss|Client ID of the client making the request|String|*|
|aud|It must always be 'http://iam.bqws.io'|String|*|
|scope|Space separated list of scopes requested|String|*|
|exp|Time when the requested access token must expired. It must be less than an hour from the time of this request|Timestamp (in seconds)|*|
|oauth.service|Service that will provide the authorization, e.g. facebook|String|*|

###Response fields###
|Name|Description|Type|Required|
|----|-----------|----|:------:|
|accessToken  |Token granted for accessing SilkRoad APIs|String|*|
|expiresAt| Epoch time (in millis) when the token expires|Long|*|

###Errors###
|Status|Error|Description|
|----|-----------|----|
|400  |invalid_grant|The grant request is invalid. This occurs when *assertion* is missing, *grant_type* is missing or it is specified to an unsupported value.|
|400  |missing_oauth_params|If the code (for oauth2) or oauth_token and/or oauth_verifier (for oauth1) parameter is missing.|
|401  |unauthorized|The grant request has not procceeded. This occurs if the signatire of the JWT is invalid, or at leats one of the requested scopes is not allowed for the client. |
|401  |no_such_principal| The princial identified by the prn field of the JWT does not exists on the domain of the issuer. |
GET /oauth/token
> Accept: application/json
< 200
< Content-Type: application/json
{
    "accessToken":"valid-token", 
    "expiresAt": 1385377605000
}


--
User
The following is a section of resources related to users in the SilkRoad platfom
--
Get user whose id is given as path parameter
###Fields###
|Name|Description|Type|Required|
|----|-----------|----|:------:|
|id  |User identifier|String|*|
|domain|Domain (id) that the user belongs to|String|*|
|username|Username is an internal identifier of the user between its domain|String|*|
|email|Email of the user|String|*|
|firstName|First name|String||
|lastName|Last name|String||
|profileUrl|URL of the user profile (ususally this is a profile page on the domain or some social network)||
|phoneNumber|Telefone number of the user|String||
|scopes|Scopes which are allowed for this user|Array[String]||
|properties|Arbitrary properties which are stored by clients on the user object|Map[String, Object]||

###Errors###
|Status|Error|Description|
|----|-----------|----|
|404  |not_found|The user domain isn't the same as the domain authorization|
|403  |scopes_not_allowed|If at least one of the specified scopes of the user are not allowed on its domain.|

GET /user/{id}
> Accept: application/json
< 200
< Content-Type: application/json
{
    "id": "fdad3eaa19ddec84b397a9e9a2312262",
    "domain": "silkroad",
    "email": "alexander.deleon@bqreaders.com",
    "username": "alexander.deleon@bqreaders.com",
    "firstName": "alex",
    "scopes": [],
    "properties" : {}
}

Same as the */v1.0/user/{id}* endpoint but the user's id is implied from the access_token. If the access_token is not associated with any user a forbidden (403) status is returned. 

###Fields###
|Name|Description|Type|Required|
|----|-----------|----|:------:|
|id  |User identifier|String|*|
|domain|Domain (id) that the user belongs to|String|*|
|username|Username is an internal identifier of the user between its domain|String|*|
|email|Email of the user|String|*|
|firstName|First name|String||
|lastName|Last name|String||
|profileUrl|URL of the user profile (ususally this is a profile page on the domain or some social network)||
|phoneNumber|Telefone number of the user|String||
|scopes|Scopes which are allowed for this user|Array[String]||
|properties|Arbitrary properties which are stored by clients on the user object|Map[String, Object]||

###Errors###
|Status|Error|Description|
|----|-----------|----|
|403  |fobidden|If the access_token is not associated with any user|

GET /user/me
> Accept: application/json
< 200
< Content-Type: application/json
{
    "id": "fdad3eaa19ddec84b397a9e9a2312262",
    "domain": "silkroad",
    "email": "alexander.deleon@bqreaders.com",
    "username": "alexander.deleon@bqreaders.com",
    "firstName": "alex",
    "scopes": [],
    "properties" : {}
}

Add user

###Parameters###
The body of the request must contain a JSON representation of the user to be created. Only the following fields are allow on this representation:

|Name|Description|Type|Required|
|----|-----------|----|:------:|
|username|Username is an internal identifier of the user between its domain|String|*|
|email|Email of the user|String|*|
|firstName|First name|String||
|lastName|Last name|String||
|profileUrl|URL of the user profile (ususally this is a profile page on the domain or some social network)||
|phoneNumber|Telefone number of the user|String||
|scopes|Scopes which are allowed for this user|Array[String]||
|properties|Arbitrary properties which are stored by clients on the user object|Map[String, Object]||

###Errors###
|Status|Error|Description|
|----|-----------|----|
|422  |invalid_entity|One of the requiered parameters is missing.|
|409  |entity_exists|When a user already exists with the the specified username and domain |
|403  |scopes_not_allowed|If at least one of the specified scopes of the user are not allowed on its domain.|
POST /user
> Accept: application/json
> Content-Type: application/json
{
  "firstName":"alex",
  "domain": "silkroad",
  "email": "alexander.deleon@bqreaders.com",
  "username": "alexander.deleon@bqreaders.com"
}
< 201
< Location: /user/123

Update user

###Parameters###
The body of the request must contain a JSON representation of the user to be updated. Only the following fields are allow on this representation:

|Name|Description|Type|Required|
|----|-----------|----|:------:|
|username|Username is an internal identifier of the user between its domain|String||
|email|Email of the user|String||
|firstName|First name|String||
|lastName|Last name|String||
|profileUrl|URL of the user profile (ususally this is a profile page on the domain or some social network)||
|phoneNumber|Telefone number of the user|String||
|scopes|Scopes which are allowed for this user|Array[String]||
|properties|Arbitrary properties which are stored by clients on the user object|Map[String, Object]||

###Errors###
|Status|Error|Description|
|----|-----------|----|
|404  |not_found|The user domain isn't the same as the domain authorization|
|403  |scopes_not_allowed|If at least one of the specified scopes of the user are not allowed on its domain.|

PUT /user/{id}
> Accept: application/json
> Content-Type: application/json
{
  "firstName":"alex",
  "domain": "silkroad",
  "email": "alexander.deleon@bqreaders.com",
  "username": "alexander.deleon@bqreaders.com"
}
< 204



Delete user


Request the termination of a user account. This operation is handled asynchronous so the request always returns status 204 (Accepted), even if the user does not exists.

###Errors###
|Status|Error|Description|
|----|-----------|----|
|404  |not_found|User id not found in IAM|

DELETE /user/{id}
> Accept: application/json
< 204

Add identity.
Add a new social identity to an existing user

###Parameters###
Json body.

|Name|Description|Type|Required|
|----|-----------|----|:------:|
|oauthService|OAuth service represented by his name (eg. "facebook", "twitter", "silkroad")|string|*|
|oauthId|User's Id in the OAuth server|string|*|

###Errors###
|Status|Error|Description|
|----|-----------|----|
|400|bad_request|Json expected malformed|
|400|invalid_oauth_service|If the specified oauth service is invalid or not allowed in the domain.|
|404|not_found|User id not found in IAM|
|409|identity_exists|The identity already exists| 

POST /user/{id}/identity
> Accept: application/json
> Content-type: application/json
{
    "oAuthService":"silkroad",
    "oAuthId":"12435"
}
< 201